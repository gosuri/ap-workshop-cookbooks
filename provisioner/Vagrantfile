# -*- mode: ruby -*-
# vi: set ft=ruby :
#
current_dir = File.expand_path(File.dirname __FILE__)
# copy ~/.ssh/id_rsa to image:/root/.ssh/id_rsa
COPY_ID_RSA = ENV['COPY_ID_RSA'] || false

HOSTNAME = ENV['BOXHOSTNAME'] || "airpair-demo-provisioner" 
BASE_BOX = ENV["BASEBOX"]     || "ubuntu/trusty64"
DEBUG    = ENV["DEBUG"]       || false
RUNLIST  = ENV['RUNLIST']     || %w(provisioner)
CHEFJSON = ENV['CHEFJSON']    || {
  serf: {
    cluster: '127.0.0.1'
  }
}
VAGRANTFILE_API_VERSION = "2"
VAGRANT_REQUIRE_VERSION = ">= 1.5.0"
ERR_MISSINGPLUGIN       = "%s plugin not detected. Please install the plugin with using 'vagrant plugin install %s'"

$shell = <<-BASH
if [ ! -f "/usr/local/bin/chef-solo" ]; then
  export DEBIAN_FRONTEND=noninteractive
  # Upgrade headlessly (this is only safe-ish on vanilla systems)
  aptitude update &&
  apt-get -o Dpkg::Options::="--force-confnew" --force-yes -fuy dist-upgrade &&
  # Install Ruby and Chef
  aptitude install -y ruby1.9.1 ruby1.9.1-dev make &&
  sudo gem1.9.1 install --no-rdoc --no-ri chef --version 11.16.4
fi
BASH

$copyid = <<-BASH
echo "#{`cat $HOME/.ssh/id_rsa`}" > /root/.ssh/id_rsa
chmod go-rwx /root/.ssh/id_rsa
BASH

Vagrant.require_version(VAGRANT_REQUIRE_VERSION)
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = BASE_BOX
  config.vm.hostname  = HOSTNAME 
  config.vm.network   :private_network, type: "dhcp"
  config.vm.network   "forwarded_port", guest: 8080, host: 8080, auto_correct: true
  config.vm.network   "forwarded_port", guest: 8081, host: 8081, auto_correct: true
  config.vm.network   "forwarded_port", guest: 9292, host: 9292, auto_correct: true
  
  with_plugin 'vagrant-berkshelf' do
    config.berkshelf.enabled = true
    config.berkshelf.berksfile_path = "Berksfile"
  end

  config.vm.provider 'virtualbox' do |v|
    v.memory = 2042
  end

  config.vm.provision :shell, inline: $shell
  config.vm.provision :shell, inline: $copyid if COPY_ID_RSA
  config.vm.provision 'chef_solo' do |chef|
    chef.json     = CHEFJSON
    chef.run_list = RUNLIST
    if DEBUG
      chef.log_level = 'debug'
      chef.verbose_logging = true
    end
  end
end

# Fails gracefully if plugin is not found
# yields the block other wise
def with_plugin(plugin, &block)
  if Vagrant.has_plugin?(plugin)
    yield if block
  else
    log sprintf(ERR_MISSINGPLUGIN, plugin, plugin), :warning
  end
end

def log(msg, type=nil)
  msg = "==> #{type}: #{msg}"
  $stdout.puts case type
  when :info
    "\033[1m#{msg}\033[22m" # bold
  when :warning
    "\033[33m#{msg}\033[0m" # brown
  when :error
    "\033[31m#{msg}\033[0m" # red
  else msg # normal
  end
end

def read_tfvars
  tfvars = {}
  File.open(File.join current_dir, 'terraform.tfvars') do |file|
    file.each_line do |line|
      parts = line.split.compact
      tfvars[parts[0]] = parts[1]
    end
  end
end
